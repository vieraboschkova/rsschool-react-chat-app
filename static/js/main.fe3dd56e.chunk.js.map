{"version":3,"sources":["ChatMessage.js","ChatInput.js","Welcome.js","Chat.js","LoginPage.js","Notification.js","showPush.js","service-worker.js","App.js","index.js"],"names":["name","message","time","userName","className","style","alignSelf","display","flexDirection","backgroundColor","border","alignItems","Date","toLocaleTimeString","ChatInput","props","submitMessage","action","onSubmit","e","preventDefault","newMessage","document","getElementById","value","id","type","placeholder","ConnectSign","connection","connect","height","width","onClick","cx","cy","r","fill","Welcome","toUpperCase","href","localStorage","clear","initApp","Chat","clientWS","messages","disconnect","map","msg","index","ChatMessage","key","from","LoginPage","logging","newValue","setItem","Notification","showNotification","hidden","requestPermission","result","navigator","serviceWorker","ready","then","registration","body","pushSubscribe","swRegistration","initializeUI","console","log","applicationServerKey","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","urlB64ToUint8Array","pushManager","subscribe","userVisibleOnly","subscription","catch","err","permission","warn","error","subscribeUser","getSubscription","addEventListener","register","swReg","sw","URL","App","initialState","isLoggedIn","state","NotificationManager","success","setState","client","W3CWebSocket","onopen","ws","onclose","warning","setTimeout","onerror","onmessage","event","messageFromServer","JSON","parse","data","addMessage","showPush","concat","messageString","alert","send","stringify","username","user","getItem","this","Component","ReactDOM","render","status"],"mappings":"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","file":"static/js/main.fe3dd56e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default ({ name, message, time, userName }) => {\r\n  return (\r\n  <p className=\"single-message\"\r\n    style = {userName === name ? {\r\n      alignSelf: \"flex-end\", \r\n      display: \"flex\",\r\n      flexDirection: \"row-reverse\",\r\n      backgroundColor: \"#66ccfa\",\r\n      border: \"#55bbfa 1px solid\",\r\n      alignItems: \"baseline\"\r\n    } \r\n      : {}}\r\n    \r\n  >\r\n    <strong>{name}</strong> {new Date(time).toLocaleTimeString()} <em>{message}</em>\r\n  </p>\r\n  )\r\n}\r\n  ","import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst ChatInput = (props) => {\r\n    const {submitMessage} = props\r\n\r\n    return (\r\n      <form className=\"bottom\"\r\n        action=\".\"\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          const newMessage = document.getElementById('newMsg')\r\n          submitMessage(newMessage.value)\r\n          newMessage.value = \"\"\r\n        }}\r\n      >\r\n        <input\r\n          id = \"newMsg\"\r\n          type=\"text\"\r\n          placeholder={'Enter message...'}\r\n        />\r\n        <input type=\"submit\" value={'Send'} />\r\n      </ form>\r\n    )\r\n  }\r\n        \r\nexport default ChatInput","import React from 'react'\r\nimport initApp from './index'\r\n\r\nconst ConnectSign = (props) => {\r\n    const {connection, connect} = props\r\n    return (\r\n        <div className=\"tooltip\">\r\n            <svg \r\n                className='connection-status' \r\n                height=\"30\" width=\"30\"\r\n                onClick = {connect}\r\n                >\r\n                <circle \r\n                    cx=\"15\" cy=\"17\" r=\"12\" fill=\"grey\" \r\n                    style = {connection === 'connected' ? {\r\n                        fill:\"#29de7d\"\r\n                    }\r\n                    :\r\n                    {\r\n                        fill:\"#ff8282\"\r\n                    }}\r\n                    >\r\n                </circle>\r\n            </svg>\r\n            <span className=\"tooltiptext\">RECONNECT</span>\r\n        </div>\r\n    )\r\n} \r\n\r\nconst Welcome = (props) => {\r\n    const {userName, connection, connect} = props\r\n\r\n    return (\r\n        <div className=\"welcome-container\">\r\n            \r\n            <h1 className=\"title\">\r\n            <ConnectSign \r\n                connection = {connection}\r\n                connect = {connect}\r\n                />\r\n                RS SCHOOL CHAT</h1>\r\n            <h4 className=\"welcome-user\">Welcome {userName.toUpperCase()} !</h4>\r\n            {connection === 'connected' ?\r\n            <p className=\"inline\">\r\n            You are now: <strong>{connection}</strong> \r\n            </p>\r\n            :\r\n            <p className=\"inline\">\r\n            You are now: <strong>{connection}</strong>.\r\n            </p>\r\n            } \r\n            Not <strong>{userName}</strong>? \r\n            <a\r\n            href='' \r\n            onClick={e => {\r\n              // e.preventDefault()\r\n              localStorage.clear()\r\n              initApp()\r\n            }}\r\n            >  Log out</a>\r\n        </div>\r\n    )\r\n}\r\nexport default Welcome","import React from 'react'\r\nimport ChatMessage from './ChatMessage'\r\nimport ChatInput from './ChatInput'\r\n\r\nimport Welcome from './Welcome'\r\n\r\nconst Chat = (props) => {\r\n  const {userName, submitMessage, clientWS, messages, connection, connect, disconnect} = props\r\n      return (\r\n        <div className=\"main-container\">\r\n          <Welcome \r\n            userName = {userName}\r\n            clientWS={clientWS}\r\n            connection = {connection}\r\n            connect = {connect}\r\n            disconnect = {disconnect}\r\n          />\r\n          <div className=\"chat-container\" id=\"chat\"\r\n            >\r\n            <ChatInput \r\n              userName = {userName}\r\n              clientWS={clientWS}\r\n              submitMessage = {submitMessage} \r\n\r\n            />\r\n\r\n            {messages.map((msg, index) =>\r\n              \r\n              <ChatMessage\r\n                userName = {userName}\r\n                key={index}\r\n                time = {msg.time}\r\n                message={msg.message}\r\n                name={msg.from}\r\n              />,\r\n            )}\r\n            </div>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  \r\n  \r\n\r\nexport default Chat","import React from 'react'\r\n\r\nconst LoginPage = (props) => {\r\n    const {logging} = props\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h1 className=\"title\">RS SCHOOL CHAT</h1>\r\n            <form \r\n                \r\n                action=\".\"\r\n                onSubmit={e => {\r\n                    e.preventDefault()\r\n                    const newValue = document.getElementById(\"login\")\r\n                    logging(newValue.value)\r\n                    localStorage.setItem('username', newValue.value);\r\n                }}\r\n            >\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={'Enter username...'}\r\n                    id = \"login\"\r\n                />\r\n                <input type=\"submit\" value={'LOGIN'} />\r\n            </ form>\r\n        </div>\r\n    )\r\n} \r\n\r\n\r\nexport default LoginPage","import React from 'react';\r\nimport {NotificationContainer} from 'react-notifications';\r\n \r\nconst Notification = () => {\r\n    return (\r\n      <div>\r\n        <NotificationContainer/>\r\n      </div>\r\n    );\r\n  }\r\n \r\nexport default Notification;","function showNotification(name) {\r\n    if (document.hidden) {\r\n    Notification.requestPermission(function(result) {\r\n      if (result === 'granted') {\r\n        navigator.serviceWorker.ready.then(function(registration) {\r\n          registration.showNotification('New Message!', {\r\n            body: `from: ${name}`,\r\n          });\r\n        });\r\n      }\r\n    });\r\n    }\r\n}\r\n\r\nexport default showNotification","const sw = \r\n// (\r\n  () => {\r\n  \r\n    let pushSubscribe = false;\r\n    let swRegistration = null;\r\n  \r\n    function initializeUI() {\r\n      console.log('subscribing')\r\n            if (pushSubscribe) {\r\n              unsubscribeUser();\r\n            } else {\r\n              subscribeUser();\r\n              console.log('trying to subscribe')\r\n            }\r\n          \r\n          swRegistration.pushManager.getSubscription()\r\n          .then(subscription => {\r\n            pushSubscribe = (subscription !== null);\r\n            if (pushSubscribe) {\r\n              console.log('User IS subscribed.');\r\n            } else {\r\n              console.log('User is NOT subscribed.');\r\n            }\r\n          });\r\n  \r\n    }\r\n  \r\n    const applicationServerPublicKey = 'BNPSV1bxg9Va-S8hCCvuj3rTV_kiMZoq5iPalZF_msFaKpw8h8bERC19Ka_NC1JtKBFix8b1ARH1ZqKlnpSDJv4'\r\n  \r\n    function subscribeUser() {\r\n      const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);\r\n      swRegistration.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: applicationServerKey\r\n      })\r\n      .then(subscription => {\r\n        console.log('User is subscribed:', subscription);\r\n        pushSubscribe = true;\r\n      })\r\n      .catch(err => {\r\n        if (Notification.permission === 'denied') {\r\n          console.warn('Permission for notifications was denied');\r\n        } else {\r\n          console.error('Failed to subscribe the user: ', err);\r\n        }\r\n      });\r\n    }\r\n  \r\n    function unsubscribeUser() {\r\n  \r\n      // TODO 3.5 - unsubscribe from the push service\r\n  \r\n    }\r\n  \r\n    function urlB64ToUint8Array(base64String) {\r\n      const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n      const base64 = (base64String + padding)\r\n        .replace(/\\-/g, '+')\r\n        .replace(/_/g, '/');\r\n  \r\n      const rawData = window.atob(base64);\r\n      const outputArray = new Uint8Array(rawData.length);\r\n  \r\n      for (let i = 0; i < rawData.length; ++i) {\r\n        outputArray[i] = rawData.charCodeAt(i);\r\n      }\r\n      return outputArray;\r\n    }\r\n  \r\n    if ('serviceWorker' in navigator) {\r\n      window.addEventListener('load', () => {\r\n        console.log('Service Worker and Push is supported');\r\n        navigator.serviceWorker.register('sw.js')\r\n        .then(swReg => {\r\n          console.log('Service Worker is registered', swReg);\r\n          swRegistration = swReg;\r\n          initializeUI()\r\n        })\r\n        .catch(err => {\r\n          console.error('Service Worker Error', err);\r\n        });\r\n      });\r\n    } else {\r\n      console.warn('Push messaging is not supported');\r\n  }\r\n  \r\n}\r\n\r\nexport default sw;","import React, { Component } from 'react'\r\nimport Chat from './Chat'\r\nimport LoginPage from './LoginPage'\r\nimport Notification from './Notification'\r\nimport {NotificationManager} from 'react-notifications';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport sw from './service-worker'\r\nimport showPush from './showPush'\r\n\r\n(sw)()\r\nconst URL = \"ws://st-chat.shas.tel\";\r\n\r\n// const workingURL = \"wss://echo.websocket.org/\";\r\n\r\nclass App extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n    initialState = {\r\n        userName: '',\r\n        isLoggedIn: false,\r\n        messages: [],\r\n        connection : '',\r\n    }\r\n\r\n    state = this.initialState\r\n\r\n    componentDidMount() {\r\n       if (localStorage.username) {\r\n            const user = localStorage.getItem('username')\r\n            this.setState({\r\n                userName: user,\r\n                isLoggedIn: true\r\n            })\r\n            this.connect()\r\n        }\r\n    }\r\n\r\n    connect = () => {\r\n        if (this.state.connection === 'connected') {\r\n            console.log('you are connected already')\r\n            NotificationManager.success('You are already connected');\r\n        } else {\r\n            this.setState({connection: 'trying to connect'}) \r\n            const client = new W3CWebSocket(URL)\r\n            client.onopen = () => {\r\n                this.setState({\r\n                    connection: 'connected',\r\n                    ws: client\r\n                })\r\n                this.state.isLoggedIn === true? NotificationManager.success('You are now connected') : console.log()\r\n                \r\n            }\r\n            client.onclose = () => {\r\n                console.log('WebSocket Client DISConnected');\r\n                this.setState({connection: 'disconnected'}) \r\n                NotificationManager.warning('You are now disconnected');\r\n                setTimeout (this.connect, 5000);\r\n            }\r\n            client.onerror = () => {\r\n                console.log('Connection Error')  \r\n                this.setState({connection: 'trying to reconnect'})  \r\n                NotificationManager.error('Connection Error.Trying to reconnect');   \r\n            }\r\n            client.onmessage = (event) => {\r\n                const messageFromServer = JSON.parse(event.data)\r\n                this.addMessage(messageFromServer)\r\n                console.log(messageFromServer)\r\n                showPush(messageFromServer[0].from)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    addMessage = (msg) => {\r\n        this.setState(state => ({ \r\n            messages: msg.concat(...state.messages)\r\n        }))\r\n    }\r\n    \r\n    submitMessage = messageString => {\r\n        if (this.state.connection !== 'connected') {\r\n            alert('you are not connected')\r\n        } else {\r\n        const message = { from: this.state.userName, message: messageString }\r\n        this.state.ws.send(JSON.stringify(message))\r\n        }\r\n    }\r\n\r\n    logging = (value) => {\r\n        console.log('changing log')\r\n        this.setState(state => ({\r\n            userName: value,\r\n            isLoggedIn: true,\r\n            })\r\n        )\r\n        this.connect()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        \r\n        <div className=\"app\">\r\n            <Notification/>\r\n            {!this.state.isLoggedIn ?\r\n            <LoginPage \r\n                userName ={this.state.userName} \r\n                logging={this.logging}\r\n            />\r\n            :\r\n            <Chat \r\n                userName ={this.state.userName} \r\n                submitMessage = {this.submitMessage} \r\n                clientWS = {this.client}\r\n                messages = {this.state.messages}\r\n                connection = {this.state.connection}\r\n                connect = {this.connect}\r\n                disconnect = {this.disconnect}\r\n            />\r\n        }\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport App from './App'\r\nimport './primitive.css'\r\nimport './style.css'\r\nimport 'react-notifications/lib/notifications.css';\r\nimport * as sw from './service-worker'\r\n\r\nfunction initApp () {\r\n    ReactDOM.render(<App />, document.getElementById('root'))\r\n    Notification.requestPermission(status => {\r\n        console.log('Notification permission status:', status);\r\n      });\r\n}\r\n\r\ninitApp()\r\n\r\nexport default initApp"],"sourceRoot":""}